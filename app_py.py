# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1swlXlfJcfAz2ueGqNfmMZF_7hOuNTIYG
"""

!pip install streamlit

import streamlit as st
import numpy as np
from PIL import Image
import tensorflow as tf

"""Step 2: Load Your Trained Model"""

@st.cache_resource
def load_model():
    model = tf.keras.models.load_model("/content/drive/MyDrive/skin_disease_resnet_model.h5")
    return model

model = load_model()

class_names = ['actinic keratosis', 'basal cell carcinoma', 'dermatofibroma', 'melanoma',
               'nevus', 'pigmented benign keratosis', 'seborrheic keratosis',
               'squamous cell carcinoma', 'vascular lesion']

"""Step 3: Build the Streamlit UI"""

st.title("AI-Powered Skin Disease Classifier")
st.write("Upload a skin lesion image and let the model predict the disease type.")

uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

"""Step 4: Preprocess the Image"""

def preprocess_image(image):
    img = image.resize((224, 224))
    img_array = tf.keras.utils.img_to_array(img)
    img_array = img_array / 255.0  # normalize
    img_array = np.expand_dims(img_array, axis=0)
    return img_array

"""Step 5: Make Prediction and Show Results"""

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert('RGB')
    st.image(image, caption='Uploaded Image', use_column_width=True)

    img_array = preprocess_image(image)
    prediction = model.predict(img_array)
    predicted_class = class_names[np.argmax(prediction)]
    confidence = np.max(prediction)

    st.success(f"Predicted Disease: {predicted_class}")
    st.info(f"Confidence: {confidence * 100:.2f}%")

"""Add this function for Grad-CAM:"""

import cv2
import matplotlib.pyplot as plt

def get_gradcam_heatmap(model, image_array, last_conv_layer_name="conv5_block32_concat", pred_index=None):
    grad_model = tf.keras.models.Model(
        [model.inputs], [model.get_layer(last_conv_layer_name).output, model.output]
    )

    with tf.GradientTape() as tape:
        conv_outputs, predictions = grad_model(image_array)
        if pred_index is None:
            pred_index = tf.argmax(predictions[0])
        class_channel = predictions[:, pred_index]

    grads = tape.gradient(class_channel, conv_outputs)
    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))

    conv_outputs = conv_outputs[0]
    heatmap = conv_outputs @ pooled_grads[..., tf.newaxis]
    heatmap = tf.squeeze(heatmap)
    heatmap = np.maximum(heatmap, 0) / tf.math.reduce_max(heatmap)
    return heatmap.numpy()

"""Add a button and visualize heatmap:"""

if st.button("Show Grad-CAM Visualization"):
    heatmap = get_gradcam_heatmap(model, img_array)

    # Superimpose on original image
    img = np.array(image.resize((224, 224)))
    heatmap = cv2.resize(heatmap, (img.shape[1], img.shape[0]))
    heatmap = np.uint8(255 * heatmap)
    heatmap_color = cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)
    superimposed_img = cv2.addWeighted(img, 0.6, heatmap_color, 0.4, 0)

    st.image(superimposed_img, caption='Grad-CAM Visualization', use_column_width=True)